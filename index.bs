<pre class='metadata'>
Title: Inline Integrity
Shortname: inline-integrity
Level: none
Status: w3c/CG-DRAFT
Group: wicg
Repository: mikewest/inline-integrity
URL: https://mikewest.github.io/inline-integrity/
Editor: Mike West, Google LLC., mkwst@google.com
Abstract: 
    This document defines a mechanism of asserting the provenance and
    integrity of inline script blocks, similar conceptually to other
    mechanisms that support assertions about externally-fetched
    resources. This is not intended to be a stand-alone specification,
    but should fold into HTML (and potentially SRI).
Complain About: accidental-2119 yes, missing-example-ids yes
Markup Shorthands: markdown yes, css no
Toggle Diffs: true
</pre>
<pre class="biblio">
{
  "SIGSRI": {
    "authors": [ "Mike West" ],
    "href": "https://wicg.github.io/signature-based-sri/",
    "title": "Signature-Based Integrity",
    "status": "cg-draft",
    "publisher": "WICG"
  }
}
</pre>
<pre class="link-defaults">
spec:dom; type:dfn; text:element
spec:html; type:element; text:link
spec:html; type:element; text:script
spec:html; type:element; text:style
spec:html; type:element; text:head
spec:infra; type:dfn; text:list
</pre>
<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/; type: dfn; spec: HTML
    text: prepare the script element; url: #prepare-the-script-element
    text: update a style block; url: #update-a-style-block
    text: import map; url: #import-map
</pre>

Introduction {#intro}
=====================

Websites are well-understood to be compositions of resources from a variety of
servers, woven together in one origin's context to satisfy a developer's goals.
These resources are generally requested through elements like <{script}> and
<{link}>, instructing user agents to make explicit requests to other servers
on the page's behalf, and to include those resources as part of the page's
construction:

```html
<script src="https://widgets-r-us.example/widget.js"></script>
```

Developers, however, often have reasons (performance, privacy, etc) to avoid
asking users' agents to take responsibility for these additional requests.
Rather than composing the page at runtime, they might choose to embed code more
directly, copy/pasting snippets into inline <{script}> blocks, or relying upon
layers of infrastructure to inline their dependencies through server-side
includes (Fastly [implements](https://docs.rs/esi/latest/esi/) a subset of
[[ESI-LANG]], for example). Depending on the development team, these dependencies
might not even be third-party in the traditional sense, but developed as
internally-shared frameworks that are jammed together through internal
infrastructure:

```xml
<!-- The main document: -->
<esi:include src="https://widgets-r-us.example/widget.include" />
```

```html
<!-- https://widgets-r-us.example/widget.include is inlined below -->
<script>
  /* Code goes here. */
</script>
<!-- End of https://widgets-r-us.example/widget.include's content -->
```

These inlined blocks are a stumbling block for developers who wish to deploy
strong protections against injection attacks, as architectural decisions might
make it difficult to coordinate <{htmlsvg-global/nonce}> attributes or content hashes
between inlined scripts and [:Content-Security-Policy:] headers delivered
with the page. Sites might fall back to allowing `'unsafe-inline'`, or simply
forgoing a policy in the first place.

Signatures might provide an option that satisfies developers' need without
additionally complicating deployments. In short, if developers can agree with
their dependencies on a (set of) signing key(s), they can encode those
relatively static constraints in the page's [=content security policy=], and
validate inlined script's signatures against those known-good keys. This
provides a proof of provenance for the code in question, allowing developers
to ensure the integrity of their supply chain in a dynamic fashion:

```html
<!-- https://widgets-r-us.example/widget.include -->
<script signature="ed25519-[base64-encoded signature]"
        integrity="ed25519-[base64-encoded public key]">
  /* Code goes here. */
</script>
```

<div class="example" id="intro-example">

Pages will assert both a signature and a key for a given <{script}> or <{style}>
element. Here, we'll use the test Ed25519 keys from [[RFC9421]] to demonstrate:

```html
<script signature="ed25519-hyFFWrQ21vPXZDV07Mn17Q3ufvYBJDs23CeYu1hGUQi4D+LN99D9I1KmXBGV5kBZtf8h4JIxBLoBzIqLdpudDg=="
        integrity="ed25519-JrQLj5P/89iXES9+vFgrIy29clF9CC/oPPsw3c5D0bs=">
  alert(1);
</script>
```

Pages can restrict execution of script through reference to these keys:

```http
Content-Security-Policy: script-src 'ed25519-JrQLj5P/89iXES9+vFgrIy29clF9CC/oPPsw3c5D0bs='
```
|
</div>


Framework {#framework}
=========

Validation {#validation}
----------

<div algorithm="parse element signatures">

To <dfn abstract-op>parse signatures</dfn> given an [=/element=] |el|, execute
the following steps, which return a [=list=] of [=byte sequences=]:

1.  Let |result| be an empty [=list=].

1.  If |el| does not have a `signature` attribute, return |result|.

1.  For each |item| resulting from [=split on ASCII whitespace|splitting=] |el|'s
    `signature` attribute's value on ASCII whitespace:

    1.  Let |algorithm-and-value| be the result of [=strictly split|splitting=]
        |item| on U+002D (`-`).

    1.  If |algorithm-and-value|[0] is not "`ed25519`", [=iteration/continue=].

    1.  Let |decoded| be the result of [=forgiving-base64 decoding=]
        |algorithm-and-value|[1].

    1.  If |decoded| is failure, [=iteration/continue=].

    1.  [=list/Append=] |algorithm-and-value|[1] to |result|.

1.  Return |result|.

</div>

<div algorithm="parse element keys">

To <dfn abstract-op>parse keys</dfn> given an [=/element=] |el|, execute
the following steps, which return a [=list=] of [=byte sequences=]:

1.  Let |result| be an empty [=list=].

1.  If |el| does not have an `integrity` attribute, return |result|.

1.  For each |item| resulting from [=split on ASCII whitespace|splitting=] |el|'s
    `integrity` attribute's value on ASCII whitespace:

    1.  Let |algorithm-and-value| be the result of [=strictly split|splitting=]
        |item| on U+002D (`-`).

    1.  If |algorithm-and-value|[0] is not "`ed25519`", [=iteration/continue=].

    1.  Let |decoded| be the result of [=forgiving-base64 decoding=]
        |algorithm-and-value|[1].

    1.  If |decoded| is failure, [=iteration/continue=].

    1.  [=list/Append=] |algorithm-and-value|[1] to |result|.

1.  Return |result|.

Note: This is partially a simplification of SRI's
[parse metadata](https://wicg.github.io/signature-based-sri/#parsing)
algorithm. It might be reasonable to rely on that directly in the future.

</div>

<div algorithm="has an invalid inline signature">

An element <dfn for="element">has an invalid inline signature</dfn> if the
following algorithm returns "`Invalid`" given an [=/element=] |el|:

1.  Let |signatures| be the result of executing [$parse signature$] on |el|.

2.  If |signatures| is [=list/empty=], return "`Valid`".

3.  Let |keys| be the result of executing [$parse keys$] on |el|.

4.  Let |inline content| be |el|'s [=child text content=].

5.  [=list/For each=] |signature| in |signatures|:

    1.  [=list/For each=] |key| in |keys|:

        1.  Execute the `Ed25519` verification algorithm as defined in Section
            5.1.7 of [[RFC8032]] using |key| as the public key portion of the
            verification key material (`A`), |inline content| as the message
            (`M`), and |signature| as the signature to be verified.

        2.  If verification succeeded, return "`Valid`". Otherwise [=continue=].

    Note: This means that the algorithm will return "`Valid`" if *any* asserted
    signature matches *any* specified key.

6.  Return "`Invalid`".

    Note: If no |keys| are specified, no signatures can be validated. We could
    punt on this condition after step 3, but it feels reasonable to fail closed
    if a signature was asserted but couldn't be validated.

</div>

Monkey-patching HTML {#monkey-patch-html}
--------------------

The following changes wire up both <{script}> and <{style}> elements to perform
signature validation before being used on a page:

### `<script>` Patches #### {#html-signature-script}

The following additions to <{script}> are required:

> <pre class="idl">
>   partial interface HTMLScriptElement {
>     [CEReactions] attribute DOMString signature;
>   };
> </pre>
> 
> <p>The <dfn element-attr for="script">signature</dfn> attribute represents a
> set of signatures over the element's [=child text content=]. The
> <{script/signature}> attribute must not be specified when the <{script/src}>
> attribute is specified.
> 
> <p>The {{HTMLScriptElement/signature}} IDL attribute [=reflects=] the value
> of the <{script/signature}> content attribute.

We'll also remove the restriction against <{script/integrity}> attributes
coexisting with <{script/src}> attributes:

> The <{script/integrity}> attribute represents the [=integrity metadata=] for
> requests which this element is responsible for. The value is text. <del>The
> <{script/integrity}> attribute must not be specified when the <{script/src}>
> attribute is not specified.</del>

ISSUE: We could also reconsider the restrictions on using <{script/integrity}>
on [=data blocks=] and [=import maps=]. Both could benefit from this kind of
integrity check?


### `<style>` Patches #### {#html-signature-style}

The following additions to <{style}> are necessary:

> <pre class="idl">
>   partial interface HTMLStyleElement {
>     [CEReactions] attribute DOMString integrity;
>     [CEReactions] attribute DOMString signature;
>   };
> </pre>
>
> <p>The <dfn element-attr for="style">integrity</dfn> attribute represents
> [=integrity metadata=] for the element. The value is text. [[SRI]].
> 
> <p>The <dfn element-attr for="style">signature</dfn> attribute represents a
> set of signatures over the element's [=child text content=].
>
> <p>The {{HTMLStyleElement/integrity}} IDL attribute [=reflects=] the value
> of the <{script/integrity}> content attribute.

> <p>The {{HTMLStyleElement/signature}} IDL attribute [=reflects=] the value
> of the <{script/signature}> content attribute.


### Script execution ### {#html-script}

<div algorithm="prepare the script element">

We'll add a new validation step alongside the callout to CSP in step 19 of HTML's
[=prepare the script element=] algorithm as follows:

<ol start="19">
  <li>
    <p>
      If <var ignore>el</var> does not have a <{script/src}> content attribute,
      then return if either of the following statements is true:
    </p>
    <ul>
      <li>
        <p>The [=Should element's inline type behavior be blocked by Content Security Policy?=]
           algorithm returns "`Blocked`" when given <var ignore>el</var>, "`script`", and
           <var ignore>source text</var>.</p>
      </li>
      <li>
        <p><ins><var ignore>el</var> [=element/has an invalid inline signature=].</ins></p>
      </li>
    </ul>
  </li>
</ol>

</div>


### Style application ### {#html-style}

<div algorithm="update a style block">

We'll add a new validation step alongside the callout to CSP in step 5 of HTML's
[=update a style block=] algorithm as follows:

<ol start="5">
  <li>
    <p>If the [=Should element's inline type behavior be blocked by Content Security Policy?=]
       algorithm returns "`Blocked`" when given the <{style}> element, "`style`",
       and the <{style}> element's [=child text content=], then return.</p>
  </li>
  <li>
    <p><ins>If the <{style}> element [=element/has an invalid inline signature=], then return.</ins></p>
  </li>
</ol>
                      

</div>


Implementation Considerations {#implementation}
=============================

What is being signed? {#implementation-message}
---------------------

The signature is asserted over the <{script}> or <{style}> element's
[=child text content=], which importantly includes both leading and trailing
whitespace. That means that `<script>alert(1);</script>` will have a different
signature than `<script> alert(1);</script>` and `<script>alert(1); </script>`.


How does this compare to Signature-Based Integrity? {#implementation-signature-base}
---------------------------------------------------

The [signature-based integrity](https://wicg.github.io/signature-based-sri/)
proposal relies upon HTTP Message Signatures [[RFC9421]] to explain how
signatures can be validated over resources requested from a remote server. As
the request and response metadata plays an important role in how the resource
is treated by the user agent, the intermediate
[signature base](https://www.rfc-editor.org/rfc/rfc9421.html#name-creating-the-signature-base)
concept is a necessary complexity that allows a server to ensure that the
signature covers all the relevant data.

Here, we have a simpler task: the entirety of the content to be validated is
embedded in the document, available at parse time. We can work with the content
directly, as there's no relevant metadata.

This means that a resource delivered via HTTP will have a different signature
than a resource delivered inline, even if the keys used are the same. This is
unfortunate, but the alternative of synthesizing a signature base for inline
content seems worse in practically every way.


Security Considerations {#security}
=======================

Integration with CSP {#security-csp}
--------------------

Broadly, the mechanism described here aims to make it easier for developers to
deploy protections against unintended injection attacks even while relying
upon inlined <{script}> or <{style}> blocks. It aims to do so in a way
consistent with existing protections like [[SRI]] and [[CSP]], giving developers
a clear path towards more safely including their dependencies.

Rather than allowing `'unsafe-inline'`, developers will have the option of
restricting themselves to inline scripts signed by a specific key.


Privacy Considerations {#privacy}
======================

Implications for Content Blocking {#privacy-content-blocking}
---------------------------------

Developers inline script in many cases to improve user experience, but script is
also inlined for purposes that undercut user agency. It's more difficult, for
example, for extensions and other mediating software to modify or block
particular resources when they're not fetched independently, but are instead
part of the document itself.

This proposal has the potential to remove some of the security risk associated
with inlined script, but might also be seen as encouraging inlining in ways that
could have negative privacy implications. Two considerations mitigate this risk:

1.  This proposal doesn't create any more encouragement to inline script for
    the purposes of evading user's intent to block it than the status quo
    already does. It allows developers to remove one risk associated with
    inlined content, but that seems quite unlikely to shift incentives to
    anything near the extent that content-blocking extensions already do.

2.  Tying inline content to a specific public key to prove provenance might
    provide an additional hook for content blocking scripts that could allow
    more clean identification of a given script's owner. As these keys are
    more static than the content itself, this proposal might actually simplify
    the process of pointing to a specific script in a document as being worthy
    of additional inspection.

